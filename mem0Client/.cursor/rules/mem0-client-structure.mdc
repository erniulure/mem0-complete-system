---
description: 
globs: 
alwaysApply: true
---
# Mem0 Client Project Structure and Development Guide

This is a comprehensive guide to the Mem0 Client project, a powerful AI memory management tool that interfaces with the Mem0 API for uploading and searching memories.

## 🏗️ Project Overview

The Mem0 Client is a sophisticated tool for managing AI memories with both CLI and web interfaces. It supports intelligent content extraction, semantic search, batch processing capabilities, and persistent configuration management.

### Key Entry Points
- [cli.py](mdc:cli.py) - Command-line interface with Click framework (371 lines)
- [web_app.py](mdc:web_app.py) - Streamlit web application (485 lines, optimized)
- [core/](mdc:core) - Core functionality modules
- [config.yaml](mdc:config.yaml) - Main configuration file with persistent settings

## 📂 Core Module Structure

### 🚀 Latest Architecture (2025 Enhanced)

The codebase has been significantly enhanced with:
- **Persistent Advanced Settings**: Custom instructions, includes/excludes saved to config
- **Enhanced Batch Upload**: Concurrent processing, per-file retry, error isolation
- **Unified Extract Mode**: Always uses "auto" mode, no more mode selection
- **Sidebar Advanced Settings**: All processing options in web sidebar
- **Automatic Timestamp Support**: JSON chat files maintain original conversation timestamps
- **300+ lines of duplicate code eliminated**
- **25-37% file size reduction**
- **New utility modules for code reuse**
- **Centralized debugging and API management**

```
mem0Client/
├── cli.py                    # CLI interface (371 lines)
├── web_app.py               # Web interface (485 lines)
├── config.yaml              # Persistent configuration with advanced_settings
├── core/
│   ├── config.py            # Enhanced config management (93+ lines)
│   ├── parser.py            # Content parsing (305 lines)
│   ├── uploader.py          # Enhanced upload with concurrency (550+ lines)
│   ├── searcher.py          # Search functionality (328 lines)
│   ├── utils.py             # Common utilities (301 lines)
│   └── web_helpers.py       # Web interface helpers (260 lines)
├── requirements.txt         # Python dependencies
└── env_example.txt          # Environment variables template
```

### Configuration Management - [config.py](mdc:core/config.py) 

**Class: `Config`**
- **Purpose**: Centralized configuration management with persistent advanced settings
- **Key Properties**:
  - `mem0_api_key` - Mem0 API key from environment or config
  - `default_user_id` - Default user identifier
  - `batch_size` - Batch processing size
  - `search_default_limit`, `search_max_limit` - Search result limits
  - `debug_logging` - Debug API logging setting
  - `message_batch_threshold`, `message_batch_size` - Message batching config
  - `concurrent_upload` - Whether to allow concurrent file uploads
  - `max_concurrent_files` - Maximum number of concurrent file uploads
  
- **NEW Advanced Settings Properties**:
  - `advanced_custom_instructions` - Persistent custom instructions
  - `advanced_includes` - Persistent includes filter
  - `advanced_excludes` - Persistent excludes filter
  - `advanced_exclude_presets` - Persistent exclude presets list
  - `advanced_infer` - Persistent infer setting

- **NEW Methods**:
  - `update_advanced_settings(**settings)` - Update and save advanced settings
  - `_save_config()` - Save current config to YAML file
  - `get_time_preset(preset_name)` - Get predefined time values
  - `validate()` - Validate API key and configuration

**Key Variables**: Configuration loaded from [config.yaml](mdc:config.yaml) and environment variables

### Enhanced Configuration File - [config.yaml](mdc:config.yaml) **NEW STRUCTURE**

```yaml
# Persistent advanced processing settings
advanced_settings:
  custom_instructions: ''    # AI processing instructions
  includes: ''              # Content types to include
  excludes: ''              # Content types to exclude
  exclude_presets: []       # Privacy exclusion presets
  infer: true              # Whether to infer memories

# File processing with concurrency support
file_processing:
  concurrent_upload: true       # Enable concurrent processing
  max_concurrent_files: 3       # Max concurrent file uploads
  supported_formats: [.md, .txt, .markdown, .json]
  max_file_size_mb: 10

# Other configuration sections...
```

### Memory Uploading - [uploader.py](mdc:core/uploader.py) **MAJOR ENHANCEMENT**

**Class: `MemoryUploader`**
- **Purpose**: Handle memory uploads with enhanced batch processing and concurrency
- **NEW Features**: Concurrent processing, per-file retry, error isolation, automatic timestamp support

**Enhanced Methods**:
- `upload_batch(file_paths, user_id, extract_mode, custom_instructions, includes, excludes, infer, concurrent_upload)` → `List[Dict]`
  - **NEW**: Enhanced batch upload with concurrency support
  - **Per-file retry**: Each file retried 3 times with exponential backoff (2s, 4s, 8s)
  - **Error isolation**: Failed files don't stop processing of other files
  - **Concurrent processing**: Optional ThreadPoolExecutor for faster uploads
  - **Detailed reporting**: Success rate, attempt counts, detailed error info

- `upload_text(...)` → `Dict` - **SIMPLIFIED**: Always uses "auto" extract mode
- `upload_file(...)` → `Dict` - **ENHANCED**: Always uses "auto" extract mode + automatic timestamp extraction
- `upload_directory(...)` → `List[Dict]` - **REMOVED**: Now uses enhanced upload_batch

**NEW Timestamp Support**:
- **Automatic Detection**: JSON files with `updated` field automatically use that timestamp
- **Time Conversion**: Converts milliseconds to Unix timestamp for Mem0 API
- **Debug Logging**: Shows timestamp extraction and API parameter passing
- **Historical Accuracy**: Maintains original conversation timestamps for imported chats

**Key Internal Functions**:
```python
def upload_single_file_with_retry(file_path: str) -> Dict[str, Any]:
    """Upload a single file with 3-attempt retry logic."""
    # Exponential backoff: 2s, 4s, 8s
    # Returns: {"file": path, "status": "success|error", "attempts": int, "error": str}
```

### Web Interface - [web_app.py](mdc:web_app.py) **MAJOR REDESIGN**

**Key Changes**:
- **Removed Extract Mode**: No more mode selection, always uses "auto"
- **Sidebar Advanced Settings**: All processing options moved to left sidebar
- **Persistent Settings**: Loads from config, saves with "💾 Save Settings" button
- **Enhanced Batch Upload**: Multi-file upload with progress tracking

**New Sidebar Structure**:
```python
# Sidebar Advanced Settings
- Custom Instructions (text_area)
- Includes/Excludes (text_input columns)
- Privacy Presets (multiselect)
- Infer Memories (checkbox)
- Save Settings button (persists to config.yaml)
```

**Upload Methods**:
1. **Text Upload**: Uses sidebar settings, simplified interface
2. **File Upload**: Single file with preview, uses sidebar settings
3. **Batch Files Upload**: **NEW** - Multi-file upload with:
   - File list display
   - Concurrent/sequential processing choice
   - Max workers slider
   - Detailed results with retry counts
   - Progress tracking and error reporting

### CLI Interface - [cli.py](mdc:cli.py) **ENHANCED**

**Enhanced Commands**:
- **Removed `--extract-mode`**: Always uses "auto" mode
- **NEW `--use-defaults`**: Use persistent settings from config file
- **Enhanced `upload-directory`**: Now uses improved batch processing

**Updated Command Structure**:
```bash
# Text upload with persistent settings
python cli.py upload-text "content" --use-defaults

# File upload with overrides
python cli.py upload-file file.md --custom-instructions "custom" --includes "docs"

# Enhanced directory upload with concurrency
python cli.py upload-directory /path --concurrent --use-defaults --custom-instructions "batch processing"
```

**Parameter Precedence**:
1. CLI arguments (highest priority)
2. Persistent config settings (if `--use-defaults` or no args)
3. Default values (lowest priority)

### File Parsing - [parser.py](mdc:core/parser.py) **STABLE**

**Class: `FileParser`** (Static methods only)
- **Purpose**: Parse different content types into structured message format
- **No changes**: Remains stable and optimized

**Key Methods**:
- `parse_json_chat(content)` - Parses JSON chat logs
- `parse_markdown_chat(content)` - Multiple markdown patterns support
- `parse_plain_text(content, extract_mode)` - Simple text parsing
- `_normalize_role(role)` - Critical for API compatibility
- `detect_content_type(content, file_extension)` - Auto-detection
- `parse_file(file_path, extract_mode)` - Main entry point

### Common Utilities - [utils.py](mdc:core/utils.py) **ENHANCED**

**Purpose**: Centralized utility classes with timestamp support

**Key Classes**:
- `DebugLogger` - Unified debug logging
- `FilterBuilder` - API filter construction
- `DateTimeHelper` - Date/time handling
- `ResultDisplayer` - Result formatting
- `ApiParameterBuilder` - **ENHANCED**: API parameter building with timestamp support
- `ErrorPatterns` - Error pattern recognition
- `MessageProcessor` - Message processing utilities

**NEW Timestamp Features**:
- `ApiParameterBuilder.build_upload_params()` - Added `timestamp` parameter support
- **Automatic Integration**: Timestamp parameter seamlessly passed to Mem0 API
- **Backward Compatibility**: Optional parameter, existing code unaffected

### Memory Searching - [searcher.py](mdc:core/searcher.py) **STABLE**

**Class: `MemorySearcher`**
- **Purpose**: Search and retrieve memories (no changes, remains optimized)
- **Uses utility classes for consistency**

### Web Interface Helpers - [web_helpers.py](mdc:core/web_helpers.py) **ENHANCED**

**Purpose**: Streamlit helper functions (enhanced for new UI)

**Updated Functions**:
- `create_advanced_settings_ui()` - **REMOVED**: Settings now in sidebar
- `process_exclude_presets()` - Enhanced preset processing
- `create_metadata_ui()` - Metadata input components
- `perform_search()`, `perform_time_search()` - Search operations
- `display_search_results()` - Result display
- `generate_weekly_report()` - Report generation

## 🚀 Key Features Implemented

### 1. **Persistent Advanced Settings**
- **Location**: [config.yaml](mdc:config.yaml) `advanced_settings` section
- **Web UI**: Left sidebar with "💾 Save Settings" button
- **CLI**: `--use-defaults` flag to use saved settings
- **Settings**: custom_instructions, includes, excludes, exclude_presets, infer

### 2. **Enhanced Batch File Upload**
- **Web UI**: Multi-file uploader in "Batch Files" tab
- **Features**: Concurrent/sequential processing, progress tracking, detailed results
- **Error Handling**: Per-file retry (3 attempts), error isolation
- **CLI**: Enhanced `upload-directory` command with concurrency options

### 3. **Concurrent Processing**
- **Configuration**: `file_processing.concurrent_upload` and `max_concurrent_files`
- **Implementation**: ThreadPoolExecutor with configurable worker count
- **Safety**: Sequential fallback option, proper error handling

### 4. **Simplified Extract Mode**
- **Change**: Removed extract mode selection, always uses "auto"
- **Rationale**: Simplifies interface, "auto" mode works best for most use cases
- **Impact**: Cleaner UI, fewer configuration options

### 5. **Automatic Timestamp Support** ⭐ **NEW**
- **JSON Chat Files**: Automatically uses `updated` timestamp from file metadata
- **Historical Accuracy**: Imported conversations maintain original timestamps, not import time
- **Time-based Search**: Enables proper chronological memory organization and retrieval
- **Seamless Integration**: No user intervention required, works automatically with Echoes exports

## 🐛 Debugging and Development

### Configuration Validation
```bash
python cli.py config-check  # Validate all settings
```

### Debug Logging
```yaml
# config.yaml
debug:
  enable_api_logging: true
```

### Common Issues and Solutions

1. **Batch Upload Errors**
   - **Check**: `concurrent_upload` setting in config
   - **Debug**: Enable API logging to see detailed error messages
   - **Solution**: Try sequential processing first

2. **Persistent Settings Not Loading**
   - **Check**: [config.yaml](mdc:config.yaml) `advanced_settings` section exists
   - **Fix**: Use "💾 Save Settings" in web UI to create proper structure

3. **Concurrent Processing Issues**
   - **Check**: `max_concurrent_files` not too high
   - **Solution**: Reduce worker count or disable concurrency

### Development Best Practices

1. **Adding New Features**: Use utility classes from [utils.py](mdc:core/utils.py)
2. **Configuration Changes**: Update both [config.py](mdc:core/config.py) and [config.yaml](mdc:config.yaml)
3. **Error Handling**: Use `ErrorPatterns.is_retryable_error()` for retry logic
4. **Debugging**: Use `DebugLogger` for consistent logging

## 📊 Data Flow

1. **Upload Flow**: File → Parser → Messages + Metadata → Enhanced Uploader (with concurrency + timestamp) → Mem0 API
2. **Config Flow**: YAML → Config class → Web/CLI interfaces → User actions → Save back to YAML
3. **Batch Flow**: Multiple files → Concurrent/Sequential processing → Individual retry → Detailed results
4. **Timestamp Flow**: JSON file → Extract `updated` field → Convert to Unix timestamp → Pass to Mem0 API

This enhanced architecture provides robust, user-friendly AI memory management with persistent configuration, advanced batch processing, automatic timestamp preservation, and improved error handling.





