# ===========================================
# AI服务扩展配置 - 可选集成Gemini Balance
# 使用方法: docker-compose -f docker-compose.yml -f docker-compose.ai-services.yml up
# ===========================================

version: '3.8'

services:
  # Gemini Balance AI服务 (可选集成)
  gemini-balance:
    image: ghcr.io/snailyp/gemini-balance:latest
    container_name: gemini-balance-integrated
    restart: unless-stopped
    ports:
      - "${GEMINI_BALANCE_PORT:-8000}:8000"
    environment:
      - MYSQL_HOST=gemini-balance-mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=root
      - MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD:-123456}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-gemini_balance}
    depends_on:
      - gemini-balance-mysql
    networks:
      - mem0-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-5}
      start_period: 30s
    profiles:
      - ai-integrated  # 只在指定profile时启动

  # Gemini Balance MySQL数据库 (可选)
  gemini-balance-mysql:
    image: mysql:8.0
    container_name: gemini-balance-mysql-integrated
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-123456}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-gemini_balance}
    ports:
      - "${GEMINI_BALANCE_MYSQL_PORT:-3307}:3306"
    volumes:
      - gemini_mysql_data:/var/lib/mysql
    networks:
      - mem0-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-5}
      start_period: 30s
    profiles:
      - ai-integrated  # 只在指定profile时启动

volumes:
  gemini_mysql_data:

networks:
  mem0-network:
    external: true
